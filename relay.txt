https://webhookrelay.com/blog/2017/11/23/github-jenkins-guide/


sudo wget -O /usr/local/bin/relay https://storage.googleapis.com/webhookrelay/downloads/relay-linux-amd64


sudo wget -O /usr/local/bin/relay https://storage.googleapis.com/webhookrelay/downloads/relay-linux-amd64


V3v5EWqGvoJF

80a27684-584f-44a0-87e5-c67a3ab2e215

home/bharat/.webhookrelay/config.json





Node-RED OwnTracks location tracking without public IP/MQTT
Secure webhooks to Jenkins on Kubernetes
Remote YouTube downloader Slack bot
Receive Github webhooks on Jenkins without public IP
Nov 23, 2017, by Karolis Rusenas
github jenkins tutorial webhooks
Jenkins is probably the most popular CI tool. Since Dev and Ops roles are growing more and more alike we need to reduce initially required ‘activation energy’ to adopt automation tools. Building and testing software should be easy, fast and reliable. Current technique known as polling repository usually results in constant delays where engineers have to wait till the next CI scanning cycle.

Another option is to use webhooks but that requires you to expose your CI server to the public internet (you can still whitelist IPs though).

In this article we are going to show how to configure end-to-end CI pipeline where you can instantly
trigger jobs via Webhook Relay service without internal Jenkins being exposed to public internet.

If you are running Jenkins on Kubernetes, check my other blog post here. It demonstrates how to configure a Jenkins instance with Webhook Relay agent running as a sidecar.

Desired workflow
Let’s say we need to connect GitHub with internally deployed Jenkins which is not reachable from outside. In order to do this, we will be using Webhook Relay:

desired workflow

Once webhook is relayed by the agent, Jenkins pulls the newest code and executes the configured job.

Step 1: Create GitHub repository
First things first, we need to get a repository! If you haven’t got GitHub account, get one.
You will need it later to login to Webhook Relay too.
Once you have logged into GitHub, look for a green “New Repository” button on the bottom right corner and click it.

creating new github repo

Choose public option as it will make this tutorial slightly quicker. Don’t close this repo window as we will be back there shortly.

Step 2: Jenkins Installation (if you already have it - ignore this step)
It’s time to get that Jenkins up and running! Head to https://jenkins.io/download/ and download our beloved (it’s not pretty but gets the job done) Jenkins. In this guide we use standard installation but I would recommend using dockerized images, especially since it’s so easy to build a new image on top of the official one.

Step 3: Setting up Jenkins with Github-Plugin
The easiest way to start receiving GitHub webhooks is by using this plugin https://plugins.jenkins.io/github:

Go to your Jenkins plugin manager
Find and install “GitHub plugin” (at the time of writing - current version was 1.27.0)
Once it’s installed, we will need to configure it:
manage jenkins



Add default GitHub server (don’t bother adding credentials as we are using public repo anyway):

jenkins add gh



Step 4: Configuring Jenkins Job
When you want Jenkins to do something - create a job. In this case we will be using Freestyle project:

jenkins create job



We have to configure several sections here - Source Code Management and Build Triggers. First, set repository (in this case it’s my demo app repo repository):

jenkins create job



Next step is setting a build trigger to GitHub hook trigger for GITScm polling:

jenkins build trigger



This means that once the Jenkins receives a webhook, it can identify which repo is changed and thus triggers a pull and job execution.

Step 5: Configuring Webhook Relay
First of all you will have to register and download the agent. See installation instructions if you don’t have an account yet (you can use GitHub OAuth option since you would already have an account with it).

For authentication, agents use pairs of keys and secrets or regular account usernames/passwords. Head to the tokens page (left navigation menu) and create one key/secret pair. Be sure to copy those somewhere so you don’t lose them in the next 2 minutes.

Step 6: Setting up Webhook Relay agent
To login with the CLI use token (generate it here) key/secret:

relay login -k your-token-key -s your-token-secret
You will then need to start forwarding webhooks to Jenkins:

relay forward --bucket github-jenkins http://localhost:8080/github-webhook/



Forwarding: 
https://my.webhookrelay.com/v1/webhooks/b7681449-330a-47a5-97d0-550f388e609a -> http://localhost:8080/github-webhook/
Starting webhook relay agent... 
2020-02-12 08:54:48.851	INFO	using standard transport...
2020-02-12 08:54:51.090	INFO	webhook relay ready...	{"host": "my.webhookrelay.com:8080", "buckets": ["b0661e6a-acd3-4c53-af78-d395f40ebaf3"]}


apt-get -y install build-essential nghttp2 libnghttp2-dev libssl-dev


sudo rm -r /var/lib/apt/lists/*

sudo apt-get clean && sudo apt-get update

apt-get update --fix-missing




----------------------

docker images 

https://linuxconfig.org/how-to-move-a-docker-image-to-another-system


Cannot connect the virtual device sata0:1 because no corresponding device is available on the host.

Do you want to try to connect this virtual device every time you power on the virtual machine?


981a2b86-7308-49c5-9ba0-d90876635491

d90876635491
